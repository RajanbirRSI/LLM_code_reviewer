name: Automated Code Review

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      checks: write

    # Add job-level outputs that reference step outputs
    outputs:
      score: ${{ steps.code-review.outputs.score }}
      passed: ${{ steps.code-review.outputs.passed }}
      should-merge: ${{ steps.check-merge.outputs.should-merge }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history
        ref: ${{ github.head_ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Ollama
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        sudo systemctl start ollama
        sleep 10
        ollama pull mistral
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests
    
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v40
      with:
        files: |
          **.py
    
    - name: Run code review
      id: code-review
      run: |
        python automated_code_reviewer.py > review_output.txt 2>&1
        
        # Extract score from output
        #SCORE=$(grep -o "Score: [0-9]\+/100" review_output.txt | grep -o "[0-9]\+" | tail -1)
        #SCORE=$(grep -oE "Score: [0-9]+/100" review_output.txt | grep -oE "[0-9]+" | head -1)
        SCORE=$(grep -oE "\b[0-9]+/100\b" review_output.txt | cut -d'/' -f1 | head -1)
        if [ -z "$SCORE" ]; then
          SCORE=0
        fi
        
        # Set outputs
        echo "score=$SCORE" >> $GITHUB_OUTPUT
        echo "passed=$([ $SCORE -ge 80 ] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT
        
        # Display results
        echo "Review Score: $SCORE"
        echo "Review Passed: $([ $SCORE -ge 80 ] && echo 'YES' || echo 'NO')"
        
        # Show full output
        echo "Full Review Output:"
        cat review_output.txt

    - name: Check merge conditions
      id: check-merge
      run: |
        SCORE=${{ steps.code-review.outputs.score }}
        PASSED=${{ steps.code-review.outputs.passed }}
        
        MIN_SCORE=80
        IS_PR=${{ github.event_name == 'pull_request' }}
        
        echo "Score: $SCORE"
        echo "Passed: $PASSED"
        echo "Is PR: $IS_PR"
        echo "Min Score Required: $MIN_SCORE"
        
        if [ "$PASSED" = "true" ] && [ "$IS_PR" = "true" ] && [ "$SCORE" -ge "$MIN_SCORE" ]; then
          echo "should-merge=true" >> $GITHUB_OUTPUT
          echo "‚úÖ All conditions met for auto-merge"
        else
          echo "should-merge=false" >> $GITHUB_OUTPUT
          echo "‚ùå Conditions not met for auto-merge"
          echo "  - Score >= $MIN_SCORE: $([ $SCORE -ge $MIN_SCORE ] && echo '‚úÖ' || echo '‚ùå')"
          echo "  - Is Pull Request: $([ "$IS_PR" = "true" ] && echo '‚úÖ' || echo '‚ùå')"
          echo "  - Review Passed: $([ "$PASSED" = "true" ] && echo '‚úÖ' || echo '‚ùå')"
        fi
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const score = ${{ steps.code-review.outputs.score }};
          const passed = ${{ steps.code-review.outputs.passed }};
          const shouldMerge = ${{ steps.check-merge.outputs.should-merge }};
          
          const status = passed ? '‚úÖ PASSED' : '‚ùå FAILED';
          const mergeStatus = shouldMerge ? 'üîÑ Auto-merge enabled' : '‚è∏Ô∏è Manual review required';
          
          const comment = `## ü§ñ Automated Code Review Results
          
          **Score:** ${score}/100
          **Status:** ${status}
          **Action:** ${mergeStatus}
          
          ${passed ? 
            '‚úÖ Your code meets our quality standards!' : 
            '‚ùå Please address the issues and push changes for re-review.'
          }
          
          ---
          *Minimum score required: 80/100*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  auto-merge:
    needs: code-review
    runs-on: ubuntu-latest
    if: needs.code-review.outputs.should-merge == 'true'
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Auto-merge PR
      uses: actions/github-script@v7
      with:
        script: |
          // Fixed output reference
          const score = ${{ needs.code-review.outputs.score }};
          
          console.log(`Attempting to merge PR with score: ${score}/100`);
          
          try {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              commit_title: `Auto-merge: Code review passed (${score}/100)`,
              commit_message: `Automated merge after successful code review.\nScore: ${score}/100\nThreshold: 80/100`,
              merge_method: 'squash'
            });
            
            console.log('‚úÖ PR merged successfully!');
            
          } catch (error) {
            console.error('‚ùå Failed to merge PR:', error.message);
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ‚ö†Ô∏è Auto-merge Failed
              
              The code review passed (${score}/100), but automatic merging failed.
              Please merge manually or check for conflicts.
              
              **Error:** ${error.message}`
            });
          }

  notify-failure:
    needs: code-review
    runs-on: ubuntu-latest
    if: needs.code-review.outputs.passed == 'false'
    
    steps:
    - name: Notify review failure
      run: |
        echo "‚ùå Code review failed"
        echo "Score: ${{ needs.code-review.outputs.review-score }}/100"
        echo "Minimum required: 80/100"
        echo "Manual review and fixes required before merge"
