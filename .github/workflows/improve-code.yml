name: Code Improver

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - main
  issue_comment:
    types: [created, edited]
  
      
permissions:
  contents: write
  pull-requests: write

jobs:
  code-improve:
    runs-on: self-hosted
    if: |
          (github.event_name == 'pull_request') || 
          (github.event_name == 'issue_comment' && github.event.issue.pull_request && contains(github.event.comment.body, '/improve')) 
        
    # Set default shell to bash for all steps
    defaults:
      run:
        shell: bash
        
    # Add job-level outputs that reference step outputs
    outputs:
      score: ${{ steps.code-review.outputs.score }}
      passed: ${{ steps.code-review.outputs.passed }}
      should-merge: ${{ steps.check-merge.outputs.should-merge }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Put a reaction to the comment
        run: gh api graphql --silent --raw-field query="mutation AddReaction {addReaction(input:{subjectId:\"$NODE_ID\",content:EYES}){reaction{content}subject{id}}}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ID: ${{ github.event.comment.node_id }}

      - name: Check powershell is working
        shell: pwsh
        run: |
         pwsh -Command "Write-Host 'PowerShell Core is working!'"
         
      - name: Check Python
        shell: pwsh  # Use Bash
        run: |
          python --version
          pip --version

      - name: Install dependencies
        shell: pwsh
        run: |
          if (Test-Path "requirements.txt") {
            pip install -r requirements.txt
          }
          pip install requests PyGithub

      - name: Check Ollama service
        shell: pwsh
        run: |
          try {
            ollama ps
            Write-Host "Ollama is running"
          } catch {
            Write-Host "Starting Ollama service..."
            Start-Process "ollama" -ArgumentList "serve" -WindowStyle Hidden
            Start-Sleep 10
            ollama ps
          }

      - name: Ensure required models are available
        shell: pwsh
        run: |
          $models = ollama list
          # if ($models -notmatch "mistral") {
          #   Write-Host "Pulling Mistral model..."
          #   ollama pull mistral
          # }
          if ($models -notmatch "hf.co/bartowski/Llama-3.2-3B-Instruct-GGUF:IQ3_M") {
            Write-Host "Pulling Llama 3.2 quantized model..."
            ollama pull hf.co/bartowski/Llama-3.2-3B-Instruct-GGUF:IQ3_M 
          }

      - name: Run automated code improver
        id: code-review
        shell: bash  # Your original bash syntax works here
        run: |
          export LC_ALL=C.UTF-8
          echo "========================= Running Code Review =============================="
          
          # Run the Python script with error handling
          set +e  # Don't exit on error immediately
          python automated_code_improver.py > review_output.txt 2>&1
          python_exit_code=$?
          set -e  # Re-enable exit on error
          
          echo "Python script exit code: $python_exit_code"
          
          if [ -f "review_output.txt" ]; then
            echo "========================= Review Output Content =============================="
            cat review_output.txt
            echo "========================= End of Review Output =============================="
            OUTPUT=$(<review_output.txt)
          else
            echo "Review output file was not created!"
            exit 1
          fi
          # Set outputs for next steps
          echo "response=$OUTPUT" >> $GITHUB_OUTPUT
            
          # Check if Python script failed
          if [ $python_exit_code -ne 0 ]; then
            echo "Python script failed with exit code: $python_exit_code"
            # Don't exit here; we already captured the output if available
          fi

      - name: Debug outputs
        shell: bash
        run: |
          echo "=== Debug Outputs ==="
          echo "Formatted Output: "
          echo "${{ steps.code-review.outputs.response }}" | base64 -d
             
      - name: Comment on PR
        if: |
          (github.event_name == 'pull_request') || 
          (github.event_name == 'issue_comment' && github.event.issue.pull_request != null)
        uses: actions/github-script@v7
        with:
          script: |
            const score = ${{ steps.code-review.outputs.score }};
            const passed = ${{ steps.code-review.outputs.passed }};
            const shouldMerge = ${{ steps.check-merge.outputs.should-merge }};
            // const shouldMerge = 'true';
            const status = passed ? '‚úÖ PASSED' : '‚ùå FAILED';
            const mergeStatus = shouldMerge ? 'üîÑ Auto-merge enabled' : '‚è∏Ô∏è Manual review required';
            
            const comment = `## ü§ñ Automated Code Review Results
            
            **Score:** ${score}/100
            **Status:** ${status}
            **Action:** ${mergeStatus}
            
            ${passed ? 
              '‚úÖ Your code meets our quality standards!' : 
              '‚ùå Please address the issues and push changes for re-review.'
            }
            
            ---
            *Minimum score required: 75/100*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
